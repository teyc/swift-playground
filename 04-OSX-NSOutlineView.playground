// Requires XCode 7.3.1
// requires Support.swift

import Cocoa
import XCPlayground

let FILENAME_COLUMN = "FileName"


func makeOutline() -> NSOutlineView {
    
    let outline = NSOutlineView(frame: NSMakeRect(0, 0, 250, 150))
    
    let fileNameColumn = NSTableColumn(identifier: FILENAME_COLUMN)
    fileNameColumn.title = "File Name"
    fileNameColumn.width = 200
    fileNameColumn.editable = true
    
    outline.addTableColumn(fileNameColumn)
    outline.selectionHighlightStyle = .Regular
    outline.rowSizeStyle = .Default
    outline.outlineTableColumn = fileNameColumn
    return outline
}

func makeOutlineDelegate() -> NSOutlineViewDelegate {
    
    class OutlineViewDelegate : NSObject, NSOutlineViewDelegate, NSTextFieldDelegate {
        
        
        // ------ NSOutlineViewDelegate
        
        @objc func outlineView(outlineView: NSOutlineView, shouldExpandItem item: AnyObject) -> Bool {
            return true;
        }
        
        @objc func outlineView(outlineView: NSOutlineView, viewForTableColumn tableColumn: NSTableColumn?, item: AnyObject) -> NSView? {
            
            let columnIdentifier = tableColumn!.identifier
            
            if let recycledCell = outlineView.makeViewWithIdentifier(columnIdentifier, owner: self) as? NSTableCellView {
                return recycledCell
            }
            
            let newCell = NSTableCellView(frame: NSMakeRect(0, 0, 150, outlineView.rowHeight))
            newCell.identifier = columnIdentifier
            newCell.autoresizingMask = .ViewWidthSizable
            newCell.autoresizesSubviews = true
            
            let imageField = NSImageView(frame: NSMakeRect(0, 0, 16, outlineView.rowHeight))
            imageField.alignment = .Center
            imageField.imageScaling = .ScaleProportionallyUpOrDown
            newCell.addSubview(imageField)
            newCell.imageView = imageField
            
            let textField = NSTextField(frame: NSMakeRect(0, 0, 120, outlineView.rowHeight))
            newCell.addSubview(textField)
            newCell.textField = textField
            
            textField.delegate = self
            textField.bordered = false
            textField.drawsBackground = false
            textField.bind(NSValueBinding,
                           toObject: newCell,
                           withKeyPath: "objectValue",
                           options: nil)
            
            return newCell
        }
        
        // ---- NSTextFieldDelegate
        
        @objc override func controlTextDidEndEditing(obj: NSNotification) {
            
            if obj.name == NSControlTextDidEndEditingNotification {
                let textField = obj.object as! NSTextField
                print ("new value = \(textField.stringValue)")
            }
            
        }
    }
    
    return OutlineViewDelegate()
}

func makeOutlineDataSource(store: [Node]) -> NSOutlineViewDataSource {
    return OutlineViewDataSource(store: store)
    
}

let store = [
    Node("Dev", [
        Node("svc_sql_dev"),
        Node("svc_app_dev")
        ]),
    Node("Test",[
        Node("svc_sql_test"),
        Node("svc_app_test")
        ]),
    Node("UAT",[
        Node("svc_sql_uat"),
        Node("svc_app_uat")
        ]),
    Node("Prod",[
        Node("svc_sql_prod"),
        Node("svc_app_prod")
        ])
]

let outline = makeOutline()
let dataSource = makeOutlineDataSource(store)
let outlineDelegate = makeOutlineDelegate()
outline.setDataSource(dataSource)
outline.setDelegate(outlineDelegate)

let container = NSScrollView(frame: NSMakeRect(0, 0, 400, 160))

container.documentView = outline
container.hasVerticalScroller = true;

XCPlaygroundPage.currentPage.liveView = container


