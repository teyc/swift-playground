// Requires XCode 7.3.1
import Cocoa
import XCPlayground

let FILENAME_COLUMN = "FileName2"

public class Node
{
    init (_ description: String, _ children: [Node]) {
        self.description = description
        self.children = children
    }
    
    convenience init (_ description: String) {
        self.init(description, [])
    }
    
    public var children : [Node] = []
    public var description: String = ""
}

func makeOutline() -> NSOutlineView {
    
    let column = NSTableColumn(identifier: FILENAME_COLUMN)
    column.title = "File Name"
    column.width = 200
    
    let outline = NSOutlineView(frame: NSMakeRect(0, 0, 200, 150))
    outline.addTableColumn(column)
    return outline
}

func makeOutlineDelegate() -> NSOutlineViewDelegate {

    class OutlineViewDelegate : NSObject, NSOutlineViewDelegate {
        
        
        @objc func outlineView(outlineView: NSOutlineView, shouldExpandItem item: AnyObject) -> Bool {
            return true;
        }
        
        @objc func outlineView(outlineView: NSOutlineView, viewForTableColumn tableColumn: NSTableColumn?, item: AnyObject) -> NSView? {
            
            let columnIdentifier = tableColumn!.identifier
            
            if let recycledCell = outlineView.makeViewWithIdentifier(columnIdentifier, owner: self) as? NSTableCellView {
                return recycledCell
            }
            
            let textField = NSTextField(frame: NSMakeRect(0, 0, 150, outlineView.rowHeight))
            
            let newCell = NSTableCellView(frame: NSMakeRect(0, 0, 150, outlineView.rowHeight))
            newCell.addSubview(textField)
            newCell.textField = textField
            newCell.identifier = columnIdentifier
            newCell.autoresizesSubviews = true
            
            textField.bind(NSValueBinding,
                           toObject: newCell,
                           withKeyPath: "objectValue",
                           options: nil)
            textField.bordered = false
            textField.backgroundColor = nil
            
            return newCell
        }
    }
    
    return OutlineViewDelegate()
}

func makeOutlineDataSource(store: [Node]) -> NSOutlineViewDataSource {
    
    
    class OutlineViewDataSource : NSObject, NSOutlineViewDataSource {
        
        var store : [Node]
        
        init(store:[Node]) {
            self.store = store
        }
        
        @objc func outlineView(outlineView: NSOutlineView, isItemExpandable item: AnyObject) -> Bool {
            
            if item is [Node] {
                return true
            }
            
            if let node = item as? Node {
                return node.children.count > 0
            }
            
            return true
        }
        
        @objc func outlineView(outlineView: NSOutlineView, objectValueForTableColumn tableColumn: NSTableColumn?, byItem item: AnyObject?) -> AnyObject? {
            
            if let node = item as? Node {
                return node.description
            }
            
            return nil
        }
        
        @objc func outlineView(outlineView: NSOutlineView, child index: Int, ofItem item: AnyObject?) -> AnyObject {
            
            if (item == nil) {
                return store[index]
            }
            
            if let nodeArray = item as? [Node] {
                return nodeArray[index]
            }
            
            if let node = item as? Node {
                return node.children[index]
            }
            
            return Node("WRONG")
        }
        
        @objc func outlineView(outlineView: NSOutlineView, numberOfChildrenOfItem item: AnyObject?) -> Int {
            
            if (item == nil) {
                return store.count;
            }
            
            if let nodeArray = item as? [Node] {
                return nodeArray.count
            }
            
            if let node = item as? Node {
                return node.children.count
            }
            
            return 0
        }
        
    }
    
    return OutlineViewDataSource(store: store)
    
}

let store = [
    Node("Dev", [
        Node("svc_sql_dev"),
        Node("svc_app_dev")
        ]),
    Node("Test",[
        Node("svc_sql_test"),
        Node("svc_app_test")
        ]),
    Node("UAT",[
        Node("svc_sql_uat"),
        Node("svc_app_uat")
        ]),
    Node("Prod",[
        Node("svc_sql_prod"),
        Node("svc_app_prod")
        ])
]

let outline = makeOutline()
let dataSource = makeOutlineDataSource(store)
let outlineDelegate = makeOutlineDelegate()
outline.setDataSource(dataSource)
outline.setDelegate(outlineDelegate)

let container = NSScrollView(
    frame: NSMakeRect(0, 0, 400, 100))

container.documentView = outline
container.hasVerticalScroller = true;

//dispatch_async(dispatch_get_main_queue(), {
//    outline.expandItem(nil, expandChildren: true)
//})

XCPlaygroundPage.currentPage.liveView = container


